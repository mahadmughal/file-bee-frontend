{"ast":null,"code":"var _jsxFileName = \"/Users/mahadasif/Desktop/file_bee/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({\n  currentUser: null,\n  setCurrentUser: () => {},\n  token: null,\n  setToken: () => {}\n});\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useState(null);\n  useEffect(() => {\n    const storedToken = localStorage.getItem(\"authToken\");\n    if (storedToken) {\n      setToken(storedToken);\n      // You can potentially fetch user data based on token here\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      setCurrentUser,\n      token,\n      setToken\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"mZkaLRhWkAosXRd9Jyfe4WbYarg=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","currentUser","setCurrentUser","token","setToken","AuthProvider","children","_s","storedToken","localStorage","getItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mahadasif/Desktop/file_bee/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\n\nexport const AuthContext = createContext({\n  currentUser: null,\n  setCurrentUser: () => {},\n  token: null,\n  setToken: () => {},\n});\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useState(null);\n\n  useEffect(() => {\n    const storedToken = localStorage.getItem(\"authToken\");\n    if (storedToken) {\n      setToken(storedToken);\n      // You can potentially fetch user data based on token here\n    }\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{ currentUser, setCurrentUser, token, setToken }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC;EACvCM,WAAW,EAAE,IAAI;EACjBC,cAAc,EAAEA,CAAA,KAAM,CAAC,CAAC;EACxBC,KAAK,EAAE,IAAI;EACXC,QAAQ,EAAEA,CAAA,KAAM,CAAC;AACnB,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACN,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMW,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACrD,IAAIF,WAAW,EAAE;MACfJ,QAAQ,CAACI,WAAW,CAAC;MACrB;IACF;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACET,OAAA,CAACC,WAAW,CAACW,QAAQ;IACnBC,KAAK,EAAE;MAAEX,WAAW;MAAEC,cAAc;MAAEC,KAAK;MAAEC;IAAS,CAAE;IAAAE,QAAA,EAEvDA;EAAQ;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACT,EAAA,CAnBWF,YAAY;AAAAY,EAAA,GAAZZ,YAAY;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}