{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useAuth } from \"../contexts/AuthContext\";\nconst API_BASE_URL = \"http://localhost:8000\";\nclass ApiService {\n  constructor() {\n    this.baseUrl = API_BASE_URL;\n  }\n  getToken() {\n    // This method will be overwritten with the actual token getter\n    return null;\n  }\n  async fetchWithAuth(endpoint, options = {}) {\n    const token = this.getToken();\n    const headers = {\n      Authorization: `Token ${token === null || token === void 0 ? void 0 : token.key}`,\n      ...options.headers\n    };\n    return this.fetchBase(endpoint, {\n      ...options,\n      headers\n    });\n  }\n  async fetchWithoutAuth(endpoint, options = {}) {\n    return this.fetchBase(endpoint, options);\n  }\n  async fetchBase(endpoint, options = {}) {\n    try {\n      const response = await fetch(`${this.baseUrl}${endpoint}`, options);\n      return this.handleResponse(response);\n    } catch (error) {\n      throw new Error(\"Network error or server unreachable\");\n    }\n  }\n  async handleResponse(response) {\n    const contentType = response.headers.get(\"content-type\");\n    if (contentType && contentType.includes(\"application/json\")) {\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || `HTTP error! Status: ${response.status}`);\n      }\n      return data;\n    } else {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response;\n    }\n  }\n  async getWithAuth(endpoint) {\n    return this.fetchWithAuth(endpoint, {\n      method: \"GET\"\n    });\n  }\n  async postWithAuth(endpoint, data) {\n    return this.fetchWithAuth(endpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n  }\n  async postWithoutAuth(endpoint, data) {\n    return this.fetchWithoutAuth(endpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n  }\n  async deleteWithAuth(endpoint) {\n    return this.fetchWithAuth(endpoint, {\n      method: \"DELETE\"\n    });\n  }\n  async postFormDataWithAuth(endpoint, formData) {\n    return this.fetchWithAuth(endpoint, {\n      method: \"POST\",\n      body: formData\n    });\n  }\n  async postFormDataWithoutAuth(endpoint, formData) {\n    return this.fetchWithoutAuth(endpoint, {\n      method: \"POST\",\n      body: formData\n    });\n  }\n\n  // Specific API methods\n  async fetchSupportedMimetypes() {\n    return this.getWithAuth(\"/target_conversions/\");\n  }\n  async convertFile(file, targetMimetype) {\n    const formData = new FormData();\n    formData.append(\"original_file\", file);\n    formData.append(\"converted_mimetype\", targetMimetype);\n    return this.postFormDataWithAuth(\"/\", formData);\n  }\n  async resetPassword(passwordResetToken, newPassword, confirmPassword) {\n    const formData = {\n      token: passwordResetToken,\n      password: newPassword,\n      confirm_password: confirmPassword\n    };\n    return this.postWithoutAuth(\"/api/user/reset_password/\", formData);\n  }\n  async updateUserProfile(userData) {\n    return this.postWithAuth(\"/api/user/profile\", userData);\n  }\n  async deleteAccount() {\n    return this.deleteWithAuth(\"/api/user/delete_account\");\n  }\n  async submitHelpRequest(formData) {\n    return this.postWithAuth(\"/send_help_request/\", formData);\n  }\n}\nexport const apiService = new ApiService();\nexport const useApiService = () => {\n  _s();\n  const {\n    token\n  } = useAuth();\n  apiService.getToken = () => token;\n  return apiService;\n};\n_s(useApiService, \"ZpOvj47KCDv4EW5BIUHQHDAsr3M=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"names":["useAuth","API_BASE_URL","ApiService","constructor","baseUrl","getToken","fetchWithAuth","endpoint","options","token","headers","Authorization","key","fetchBase","fetchWithoutAuth","response","fetch","handleResponse","error","Error","contentType","get","includes","data","json","ok","status","getWithAuth","method","postWithAuth","body","JSON","stringify","postWithoutAuth","deleteWithAuth","postFormDataWithAuth","formData","postFormDataWithoutAuth","fetchSupportedMimetypes","convertFile","file","targetMimetype","FormData","append","resetPassword","passwordResetToken","newPassword","confirmPassword","password","confirm_password","updateUserProfile","userData","deleteAccount","submitHelpRequest","apiService","useApiService","_s"],"sources":["/Users/mahadasif/Desktop/file_bee/frontend/src/services/apiService.js"],"sourcesContent":["import { useAuth } from \"../contexts/AuthContext\";\n\nconst API_BASE_URL = \"http://localhost:8000\";\n\nclass ApiService {\n  constructor() {\n    this.baseUrl = API_BASE_URL;\n  }\n\n  getToken() {\n    // This method will be overwritten with the actual token getter\n    return null;\n  }\n\n  async fetchWithAuth(endpoint, options = {}) {\n    const token = this.getToken();\n    const headers = {\n      Authorization: `Token ${token?.key}`,\n      ...options.headers,\n    };\n    return this.fetchBase(endpoint, { ...options, headers });\n  }\n\n  async fetchWithoutAuth(endpoint, options = {}) {\n    return this.fetchBase(endpoint, options);\n  }\n\n  async fetchBase(endpoint, options = {}) {\n    try {\n      const response = await fetch(`${this.baseUrl}${endpoint}`, options);\n      return this.handleResponse(response);\n    } catch (error) {\n      throw new Error(\"Network error or server unreachable\");\n    }\n  }\n\n  async handleResponse(response) {\n    const contentType = response.headers.get(\"content-type\");\n    if (contentType && contentType.includes(\"application/json\")) {\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || `HTTP error! Status: ${response.status}`);\n      }\n      return data;\n    } else {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response;\n    }\n  }\n\n  async getWithAuth(endpoint) {\n    return this.fetchWithAuth(endpoint, { method: \"GET\" });\n  }\n\n  async postWithAuth(endpoint, data) {\n    return this.fetchWithAuth(endpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n  }\n\n  async postWithoutAuth(endpoint, data) {\n    return this.fetchWithoutAuth(endpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    });\n  }\n\n  async deleteWithAuth(endpoint) {\n    return this.fetchWithAuth(endpoint, { method: \"DELETE\" });\n  }\n\n  async postFormDataWithAuth(endpoint, formData) {\n    return this.fetchWithAuth(endpoint, {\n      method: \"POST\",\n      body: formData,\n    });\n  }\n\n  async postFormDataWithoutAuth(endpoint, formData) {\n    return this.fetchWithoutAuth(endpoint, {\n      method: \"POST\",\n      body: formData,\n    });\n  }\n\n  // Specific API methods\n  async fetchSupportedMimetypes() {\n    return this.getWithAuth(\"/target_conversions/\");\n  }\n\n  async convertFile(file, targetMimetype) {\n    const formData = new FormData();\n    formData.append(\"original_file\", file);\n    formData.append(\"converted_mimetype\", targetMimetype);\n    return this.postFormDataWithAuth(\"/\", formData);\n  }\n\n  async resetPassword(passwordResetToken, newPassword, confirmPassword) {\n    const formData = {\n      token: passwordResetToken,\n      password: newPassword,\n      confirm_password: confirmPassword,\n    };\n    return this.postWithoutAuth(\"/api/user/reset_password/\", formData);\n  }\n\n  async updateUserProfile(userData) {\n    return this.postWithAuth(\"/api/user/profile\", userData);\n  }\n\n  async deleteAccount() {\n    return this.deleteWithAuth(\"/api/user/delete_account\");\n  }\n\n  async submitHelpRequest(formData) {\n    return this.postWithAuth(\"/send_help_request/\", formData);\n  }\n}\n\nexport const apiService = new ApiService();\n\nexport const useApiService = () => {\n  const { token } = useAuth();\n  apiService.getToken = () => token;\n  return apiService;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}